% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allClasses.R, R/show-methods.R,
%   R/subset-methods.R
\docType{class}
\name{MultiAmplicon-class}
\alias{MultiAmplicon-class}
\alias{MultiAmplicon}
\alias{getPrimerPairsSet}
\alias{getPairedReadFileSet}
\alias{getRawCounts}
\alias{getStratifiedFilesF}
\alias{getStratifiedFilesR}
\alias{getDerepF}
\alias{getDerepR}
\alias{getDadaF}
\alias{getDadaR}
\alias{getMergers}
\alias{getSequenceTable}
\alias{getSequenceTableNoChime}
\alias{getTaxonTable}
\alias{getSequencesFromTable}
\alias{getSequencesFromTable,MultiAmplicon-method}
\alias{show,MultiAmplicon-method}
\alias{[,MultiAmplicon,index,index,ANY-method}
\alias{[,MultiAmplicon,index,missing,ANY-method}
\alias{[,MultiAmplicon,missing,index,ANY-method}
\title{The central data structure of the MultiAmplicon package}
\usage{
MultiAmplicon(
  PrimerPairsSet = PrimerPairsSet(),
  PairedReadFileSet = PairedReadFileSet(),
  .Data = matrix(ncol = 0, nrow = 0),
  stratifiedFiles = list(),
  sampleData = new("sample_data", data.frame(row.names = names(PairedReadFileSet),
    readsF = PairedReadFileSet@readsF, readsR = PairedReadFileSet@readsF)),
  derep = list(),
  dada = list(),
  mergers = list(),
  sequenceTable = list(),
  sequenceTableNoChime = list(),
  taxonTable = list()
)

getPrimerPairsSet(MA)

getPairedReadFileSet(MA)

getRawCounts(MA)

getStratifiedFilesF(MA, simplify = TRUE)

getStratifiedFilesR(MA, simplify = TRUE)

getDerepF(MA, simplify = TRUE)

getDerepR(MA, simplify = TRUE)

getDadaF(MA, simplify = TRUE)

getDadaR(MA, simplify = TRUE)

getMergers(MA, simplify = TRUE)

getSequenceTable(MA, simplify = TRUE)

getSequenceTableNoChime(MA, simplify = TRUE)

getTaxonTable(MA, simplify = TRUE)

getSequencesFromTable(MA)

\S4method{getSequencesFromTable}{MultiAmplicon}(MA)

\S4method{show}{MultiAmplicon}(object)

\S4method{[}{MultiAmplicon,index,index,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{MultiAmplicon,index,missing,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{MultiAmplicon,missing,index,ANY}(x, i, j, ..., drop = FALSE)
}
\arguments{
\item{PrimerPairsSet}{a set of primer pairs specifiying your
amplicons see \code{\link{PrimerPairsSet-class}}}

\item{PairedReadFileSet}{a set of paired end sequencing data files
\code{\link{PairedReadFileSet-class}}}

\item{.Data}{Users should not supply this parameter, the slot
is created by \code{\link{sortAmplicons}}.}

\item{stratifiedFiles}{Users should not supply this parameter, the
slot is created by \code{\link{sortAmplicons}}.}

\item{sampleData}{Users should not supply this parameter. It's
filled with a sample_data object from
\code{\link[phyloseq]{phyloseq}}. The slot is created from
sample names (same as \code{colnames(MA)}) and more data can
be added by \code{\link{addSampleData}}.}

\item{derep}{Users should not supply this parameter, the slot is
created by \code{\link{derepMulti}}}

\item{dada}{Users should not supply this parameter, the slot is
created by \code{\link{dadaMulti}}}

\item{mergers}{Users should not supply this parameter, the slot is
created by \code{\link{mergeMulti}}}

\item{sequenceTable}{Users should not supply this parameter, the
slot is created by \code{\link{makeSequenceTableMulti}}}

\item{sequenceTableNoChime}{Users should not supply this parameter,
the slot is created by \code{\link{removeChimeraMulti}}}

\item{taxonTable}{Users should not supply this parameter, the slot
is created by \code{\link{blastTaxAnnot}}. It's filled with a
list of taxonomyTable objects from
\code{\link[phyloseq]{phyloseq}}.}

\item{MA}{MultiAmplicon-class object}

\item{simplify}{Should a list of objects be simplified to only one
object if it has length one?}

\item{object}{A \code{MultiAmplicon-class} object.}

\item{x}{MultiAmplicon-class object}

\item{i}{numeric, logical or names vector for subsetting rows (==
amplicons)}

\item{j}{numeric, logical or names vector for subsetting columns
(== read files, corresponding usually to samples)}

\item{...}{not used}

\item{drop}{should not be used}
}
\description{
The MultiAmplicon class is a container that stores at least primer
pairs, read files and progressively processed data in an 'amplicon
x samples' format. The slots in this object are incrementally
filled with by running wrappers functions (mostly around functions
from the \code{dada2} package). The object is treated (subsetted
etc.) like a (pseudo) matrix, colums are samples, rows are
different amplicons.

Subsetting for MultiAmplicon objects should conveniently subset
all (potentially) filled slots
}
\section{Functions}{
\itemize{
\item \code{MultiAmplicon}: Constructor for
MultiAmplicon-class
}}

\section{Slots}{

\describe{
\item{\code{PrimerPairsSet}}{The primer pairs used in your experiment to
specify amplicons stored in a
\code{\link{PrimerPairsSet-class}} object.}

\item{\code{PairedReadFileSet}}{The (quality filtered) fastq files (one
file pair for each sample) that store your sequencing data.}

\item{\code{.Data}}{A numeric matrix of sequencing read counts per
amplicon and sample. Created by the function
\code{\link{sortAmplicons}} in the MultiAmplicon pipeline.}

\item{\code{sampleData}}{A sample_data object from
\code{\link[phyloseq]{phyloseq}}. The slot is created from
sample names (names of the \code{\link{PrimerPairsSet}}, which
have tto be the same as \code{colnames(MA)}). More data can be
added by \code{\link{addSampleData}}.}

\item{\code{stratifiedFiles}}{temporary files as a result of stratifying
into amplicons and samples using the MultiAmplicon pipeline
function \code{\link{sortAmplicons}}. Forward (sometimes
called R1) and reverse (sometimes called R2) files are stored
as a (amplicons x samples) matrix of
\code{\link{PairedReadFileSet-class}} objects.}

\item{\code{derep}}{A list of \code{\link{PairedDerep-class}} objects
containing pairs of derep-class objects created by
\code{dada2}’s \code{\link[dada2]{derepFastq}} function or
withing the MultiAmplicon pipeline by
\code{\link{derepMulti}}.}

\item{\code{dada}}{A list of \code{\link{PairedDada-class}} object
containing pairs of dada-class objects created by
\code{dada2}’s \code{\link[dada2]{dada}} function. Within the
MultiAmplicon pipeline this slot is filled by
\code{\link{dadaMulti}}.}

\item{\code{mergers}}{A list of objects containing merged pairs of forward
and reverse reads as created by by \code{dada2}’s
\code{\link[dada2]{mergePairs}} function. Within the
MultiAmplicon pipeline this slot is filled by
\code{\link{mergeMulti}}.}

\item{\code{sequenceTable}}{A list of matrix objects created by
\code{dada2}’s \code{\link[dada2]{makeSequenceTable}}.
Samples (in rows) and amplified sequence variants (ASVs) in
columns.  Within the MultiAmplicon pipeline this slot is
filled by \code{\link{makeSequenceTableMulti}}.}

\item{\code{sequenceTableNoChime}}{A list of matrix objects created by
\code{dada2}’s \code{\link[dada2]{removeBimeraDenovo}}.
Samples (in rows) and ASVs screened for PCR chimeras in
columns. Within the MultiAmplicon pipeline this slot is filled
by \code{\link{removeChimeraMulti}}.}

\item{\code{taxonTable}}{A list of matrix objects created by a function
    for taxonomical annotation (for example
    \code{\link{blastTaxAnnot}}.  ASVs are in rows and taxnomical
    ranks are in columns. 

MultiAmplicon(PrimerPairsSet, PairedReadFileSet)}
}}

\examples{

primerF <- c("AGAGTTTGATCCTGGCTCAG", "ACTCCTACGGGAGGCAGC",
            "GAATTGACGGAAGGGCACC", "YGGTGRTGCATGGCCGYT")
primerR <- c("CTGCWGCCNCCCGTAGG", "GACTACHVGGGTATCTAATCC",
             "AAGGGCATCACAGACCTGTTAT", "TCCTTCTGCAGGTTCACCTAC")

PPS <- PrimerPairsSet(primerF, primerR)

fastq.dir <- system.file("extdata", "fastq", package = "MultiAmplicon")
fastq.files <- list.files(fastq.dir, full.names=TRUE)
Ffastq.file <- fastq.files[grepl("F_filt", fastq.files)]
Rfastq.file <- fastq.files[grepl("R_filt", fastq.files)]

PRF <- PairedReadFileSet(Ffastq.file, Rfastq.file)

MA <- MultiAmplicon(PPS, PRF)

## sort into amplicons
MA1 <- sortAmplicons(MA, filedir=tempfile(pattern = "dir"))

## Only after sorting the MultiAmplicon object is really poplated
## with sensible data, now matrix-like access to different 
## amplicons (primer pairs) and different sequencing read files
## (usually samples) is implemented.

## the number of amplicons (primer pairs)
nrow(MA)

## the number of samples (sequencing read file pairs)
ncol(MA)

## dereplication is currently not supported
## MA2 <- derepMulti(MA1)

### use dada directly after sorting
MA3 <- dadaMulti(MA1, selfConsist = TRUE)

MA4 <- mergeMulti(MA3, justConcatenate=TRUE)

MA5 <- makeSequenceTableMulti(MA4)

MA6 <- removeChimeraMulti(MA5, mc.cores=1)

}
\seealso{
\code{\link[dada2]{derepFastq}},\code{\link[dada2]{dada}}
}
\author{
Emanuel Heitlinger
}
